/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------ EQUATIONS ----------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*------------------------------------------------------------- THE ON MESSAGE FUNCTION -------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/* 	This is the function that is invoked whenever the EquationSolver algorithm is called. The JSON object sent to the function expects to receive 2 different items.	\
	The first item is the name of the file in question. This is the part tree file URL. The second item is the object that contains the tree information. This function	\
	calls another recursive function that deletes all of the subobjects that are set to 0 for the active property. 														\
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	importScripts('big.min.js');  																																	//	\
	onmessage = function (Event) 																																	//	\
	{	pTArray=new Array();																																		//	\
		fileName=Event.data['fileName'];																															//	\
		parameter=Event.data['parameter'];																															//	\
		partTree=JSON.parse(Event.data['partTreeObj']);																												//	\
		deleteInactive('', function() { loadData(fileName, parameter, pTArray)	} );																				//	\
	}																																								//	\
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------- DELETE ALL INACTIVE ITEMS ----------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*	This function takes in a URL and an item name to return. It then sends those items to the function that uses an ajax call to pull the the item from the database.	\
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function deleteInactive(Path, callback)																																//	\
{	var num=Path.split('/').length;																																	//	\
	if(Path=="") { num=0; }																																			//	\
	var sP=Path.split('/');																																			//	\
	var thisObject={};																																				//	\
console.log('The num is '+num+' and the Path is '+Path);
	if (num==0) { thisObject=partTree['Tree'];	}																													//	\
	if (num==1) { thisObject=partTree['Tree'][sP[0]];	}																											//	\
	if (num==2) { thisObject=partTree['Tree'][sP[0]][sP[1]];	}																									//	\
	if (num==3) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]]; }																								//	\
	if (num==4) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]][sP[3]]; }																						//	\
	if (num==5) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]][sP[3]][sP[4]]; }																					//	\
	if (num==6) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]][sP[3]][sP[4]][sP[5]];}																			//	\
	if (num==7) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]][sP[3]][sP[4]][sP[5]][sP[6]]; }																	//	\
	if (num==8) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]][sP[3]][sP[4]][sP[5]][sP[6]][sP[7]]; }															//	\
	if (num==9) { thisObject=partTree['Tree'][sP[0]][sP[1]][sP[2]][sP[3]][sP[4]][sP[5]][sP[6]][sP[7]][sP[8]]; }														//	\
	for (var index in thisObject)																																	//	\
	{	console.log('The item is '+index+' and the type is '+typeof(thisObject[index]));
		if(typeof(thisObject[index])=="object")																														//	\
		{	delete thisObject['created'];																															//	\
			delete thisObject['modified'];																															//	\
					if (thisObject[index]['active']==0)	{	delete thisObject[index];																				//	\
					}else if (thisObject[index]['active']==1)																										//	\
					{	if (thisObject[index]['type']=='1') { pTArray.push(Path+'/'+index); console.log('Pushing '+index); }																		//	\
						if (num==0) { deleteInactive(index); }else{ if (thisObject[index]['type']=='0') { deleteInactive(Path+'/'+index); } 	}					//	\
					}																																				//	\
		}																																							//	\
	}																																								//	\
	if (typeof(callback)=="function") {  callback(); }																												//	\
}																																									//	\
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*------------------------------------------------- THE XML REQUEST FUNCTION ------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*	This function is used throughout the worker to make ajax calls to the part tree controller.																			\
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function loadData(fileName, parameter, thisArray, callback) 																										//	\
{	var xhr;																																						//	\
	if(typeof XMLHttpRequest !== 'undefined') xhr = new XMLHttpRequest();																							//	\
	else 																																							//	\
	{	var versions = ["MSXML2.XmlHttp.5.0", 																														//	\
			 	"MSXML2.XmlHttp.4.0",																																//	\
			 	"MSXML2.XmlHttp.3.0", 																																//	\
			 	"MSXML2.XmlHttp.2.0",																																//	\
			 	"Microsoft.XmlHttp"]																																//	\
		for(var i = 0, len = versions.length; i < len; i++) {																										//	\
			try {																																					//	\
				xhr = new ActiveXObject(versions[i]);																												//	\
				break;																																				//	\
			}																																						//	\
			catch(e){}																																				//	\
		} 																																							//	\
	}																																								//	\
	xhr.onreadystatechange = ensureReadiness;																														//	\
	function ensureReadiness() 																																		//	\
	{	if(xhr.readyState < 4) { 	return; }																														//	\
		if(xhr.status !== 200) { 	return; }																														//	\
		if(xhr.readyState === 4) {	returnData(parameter, xhr.responseText); }																						//	\
	}																																								//	\
	xhr.open('POST', "../PartTree/getProperty", true);																												//	\
	xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");																						//	\
	xhr.send("fileName="+fileName+"&partTree="+thisArray+"&parameter="+parameter);																					//	\
}																																									//	\
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*------------------------------------------------- THE XML RESPONSE FUNCTION -----------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*	This function is is called whenever the ajax call returns. It returns a JSON string that is a single index object. The key is a string containing the part ID and	\
	the value is a string with a number and the units.																													\ 
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
function returnData (parameter, responseText)																														//	\
{	postMessage(																																					//	\
	{	"parameterKey":parameter, 																																	//	\
		"responseData":responseText, 																																//	\
	});																																								//	\
}
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
